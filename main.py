import os
import argparse
import config
import utils
from parser import lmod
from writer import rest

def create_directories():
    os.makedirs(config.IMPORTS_DIR, exist_ok=True)
    os.makedirs(config.STACKS_DIR, exist_ok=True)
    os.makedirs(config.CUSTOM_DIR, exist_ok=True)

def process_modulepath(modulepaths, title, output_dir):
    # Run collect_data.py if data file doesn't exist
    collected_data = utils.ensure_data_collected()

    if collected_data:
        package_infos, latest_version_info, package_ref = lmod.extract_package_info(collected_data)
    else:
        package_infos, latest_version_info, package_ref = None, None, None

    return package_infos, latest_version_info, package_ref

def main():

    write_log(config.main_log_file)

    create_directories()

    for title, output_dir in zip(config.titles, config.output_dirs):
        print(f"Processing {title} in directory {output_dir}")
        package_infos, latest_version_info, package_ref = process_modulepath(config.modulepaths, title, output_dir)
        rest.write_all_files(title, output_dir, package_infos, package_ref, latest_version_info)

    stacks_title = "All Packages Index"
    stacks_file = os.path.join(config.STACKS_DIR, "index.rst")
    write_file(stacks_file, f"{stacks_title}\n{'=' * len(stacks_title)}\n\nLast updated: {config.current_date}\n\n.. toctree::\n    :maxdepth: 1\n    :glob:\n\n")

    for output_dir in config.output_dirs:
        utils.append_file(stacks_file, f"    {output_dir}/index\n")

    note_file = os.path.join(config.IMPORTS_DIR, "packages_note.rst")
    utils.write_file(note_file, f".. note::\n\n   This is an autogenerated page, more detail including examples may be available for this package. Please see :ref:`stanage-software`\n")

if __name__ == "__main__":
    global verbose
    verbose = False
    parser = argparse.ArgumentParser(description="Increases verbosity of logs to screen if -v is passed")
    parser.add_argument("-v", "--verbose", action="store_true", help="increase output verbosity")
    args = parser.parse_args()

    if args.verbose:
        verbose = True

    main()
