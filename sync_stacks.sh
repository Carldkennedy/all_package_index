#!/bin/bash

# This script automates the process of updating files in a Git repository after an automatic build.
# It generates new files, creates a new branch, and synchronizes specific directories with updated content.
# The script also checks if the repository exists locally, clones it if missing, and uses rsync for efficient updates.
# Optional commands for committing and pushing changes are provided but commented out for safety.
# Display helper message if no arguments or -help is passed

if [ $# -eq 0 ] || [[ "$1" =~ ^(--help|-help|-h)$ ]]; then
    echo "Usage: $0 [OPTIONS]"
    echo "Options:"
    echo "  --rocket, -r  Run run-hpc-rocket.sh script."
    echo "  --push, -p    Commit and push changes to the remote repository."
    echo "  --help, -h    Display this help message."
    exit 0
fi

# Parse arguments
RUN_HPC=false
RUN_PUSH=false
for arg in "$@"; do
    case $arg in
        --rocket|-r)
            RUN_HPC=true
            ;;
        --push|-p)
            RUN_PUSH=true
            ;;
        *)
            echo "Unknown argument: $arg"
            exit 1
            ;;
    esac
done

# Ensure config.env exists
if [ ! -f config.env ]; then
    echo "Error: config.env file not found. Please ensure it exists in the current directory."
    exit 1
fi
source config.env

# Paths to the new files generated by the build
IMPORTS_NEW="${IMPORTS_DIR}"
SOFTWARE_NEW="${STACKS_DIR}"
CUSTOM_NEW="${CUSTOM_DIR}"

# Paths to the existing directories in the Git repository
IMPORTS_EXISTING="${REPO_DIR}/${IMPORTS_DIR}"
SOFTWARE_EXISTING="${REPO_DIR}/${STACKS_DIR}"
CUSTOM_EXISTING="${REPO_DIR}/${CUSTOM_DIR}"

# Ensure run-hpc-rocket.sh exists and runs
if [ ! -f ./run-hpc-rocket.sh ]; then
    echo "Error: run-hpc-rocket.sh not found. Please ensure it exists in the current directory."
    exit 1
fi
./run-hpc-rocket.sh

# Clone the repository if it does not exist locally
if [ ! -d "$REPO_DIR/.git" ]; then
    echo "Cloning repository $GITHUB_REPOSITORY"
    mkdir -p "$BUILD_DIR"
    pushd "$BUILD_DIR" || exit
    git clone git@github.com:${GITHUB_REPOSITORY}.git || { echo "Error: Failed to clone repository."; exit 1; }
    popd || exit
fi

# Generate a unique branch name with the current timestamp
BRANCH_NAME="all-package-index-update-$(date +%Y%m%d-%H%M%S)"

# Switch to the repository directory, update from remote, and create a new branch
pushd "$REPO_DIR" || exit
git switch $GITHUB_REPO_MAIN_BRANCH
git pull origin $GITHUB_REPO_MAIN_BRANCH || { echo "Error: Failed to pull from origin $GITHUB_REPO_MAIN_BRANCH."; exit 1; }

# Create and switch to the new branch
echo "Creating and switching to new branch '$BRANCH_NAME'."
git checkout -b "$BRANCH_NAME"
popd || exit

# Create necessary directories if they don't exist
mkdir -p "$IMPORTS_EXISTING" "$SOFTWARE_EXISTING" "$CUSTOM_EXISTING"

# Sync new files to the corresponding directories in the Git repository
rsync -a --delete --exclude="custom/" "$IMPORTS_NEW/" "$IMPORTS_EXISTING/"   # Overwrite imports except custom
rsync -a --delete "$SOFTWARE_NEW/" "$SOFTWARE_EXISTING/"                      # Overwrite software stack
rsync -a --ignore-existing "$CUSTOM_NEW/" "$CUSTOM_EXISTING/"                 # Only add new files in custom

# Uncomment these lines to commit and push the changes to the remote repository
pushd "$REPO_DIR"

# Set your header message
HEADER_MESSAGE="Updated API with changes on $(date +%Y-%m-%d)"

# Get the current commit hash (shortened to 8 characters)
CURRENT_HASH=$(git rev-parse --short=8 HEAD)

# Check if there are any changes
if git diff --quiet -- "$IMPORTS_DIR"; then
    echo "No changes detected in $IMPORTS_DIR. Skipping commit."
    popd
    exit 0
fi

# File pattern to filter
FILE_PATTERN="*-ml-*"

# Generate a filtered diff for added modules
MODULES_ADDED=$(git diff -- "$IMPORTS_DIR" | grep -E "^\+" | grep "module load" | sed 's/^+ module load //' | tr '\n' '\n- ' || echo "None")

# Generate a filtered diff for removed modules
MODULES_REMOVED=$(git diff -- "$IMPORTS_DIR" | grep -E "^\-" | grep "module load" | sed 's/^- module load //' | tr '\n' '\n- ' || echo "None")

# Format the body message
BODY_MESSAGE="This documentation was generated from commit $CURRENT_HASH of the all_package_index repo.

Modules added:
$MODULES_ADDED

Modules removed:
$MODULES_REMOVED"


# Optionally push changes
if [ "$RUN_PUSH" = true ]; then
    # Show diff output for visual confirmation
    echo "\nChanges to be committed:\n"
    git diff 

    read -p "Push changes to remote repository? (y/n): " CONFIRM
    if [[ "$CONFIRM" != "y" ]]; then
        echo "Push aborted."
        popd
        exit 0
    fi

    # Commit and push the changes
    git add .
    git commit -m "$HEADER_MESSAGE" -m "$BODY_MESSAGE"
    git push --set-upstream origin "$BRANCH_NAME" || { echo "Error: Failed to push changes."; exit 1; }
fi

popd
